@model List<AreEyeP.Models.Catacomb>
@{
    Layout = null;  // Not using the _Layout.cshtml file for this specific page
    ViewData["Title"] = "Catacomb Management";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    @Html.Partial("_CSSLinks")
    <link rel="stylesheet" href="https://cdn.datatables.net/1.11.3/css/jquery.dataTables.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css" />
</head>
<body class="sb-nav-fixed">
    @Html.Partial("_Header")
    <div id="layoutSidenav">
        @Html.Partial("_Sidebar")

        <div id="layoutSidenav_content">
            <main>
                <div class="container-fluid px-4">
                    <h2 class="text-center mt-4">Catacomb Management</h2>
                    <div class="text-right mb-3">
                        <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addCatacombModal">Add Catacomb</button>
                    </div>

                    <!-- Catacomb List -->
                    <div class="card mb-4">
                        <div class="card-header bg-success text-white">Catacomb List</div>
                        <div class="card-body">
                            <table id="catacombTable" class="display table table-bordered table-striped">
                                <thead class="bg-success text-white">
                                    <tr>
                                        <th>Catacomb ID</th>
                                        <th>Catacomb Details</th>
                                        <th>Availability Status</th>
                                        <th>Deceased Information</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="catacombTableBody">
                                    @foreach (var catacomb in Model)
                                    {
                                        <tr id="catacomb-@catacomb.Id">
                                            <td>@catacomb.CatacombID</td>
                                            <td><a href="#" class="view-link" data-id="@catacomb.Id" onclick="viewCatacomb('@catacomb.Id')">View</a></td>
                                            <td>
                                                @if (catacomb.AvailabilityStatus == "Available")
                                                {
                                                    <span class="badge bg-success">@catacomb.AvailabilityStatus</span>
                                                }
                                                else if (catacomb.AvailabilityStatus == "Unavailable")
                                                {
                                                    <span class="badge bg-danger">@catacomb.AvailabilityStatus</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary">@catacomb.AvailabilityStatus</span>
                                                }
                                            </td>
                                            <td>
                                                @if (string.IsNullOrEmpty(catacomb.DeceasedInformation))
                                                {
                                                    <span class="badge bg-secondary">None</span>
                                                }
                                                else
                                                {
                                                    @catacomb.DeceasedInformation
                                                }
                                            </td>
                                            <td>
                                                <button class="btn btn-warning btn-sm" onclick="editCatacomb('@catacomb.Id')">Update</button>
                                                <button class="btn btn-danger btn-sm" onclick="deleteCatacomb('@catacomb.Id')">Delete</button>
                                            </td>
                                        </tr>
                                    }
                                    @if (!Model.Any())
                                    {
                                        <tr>
                                            <td colspan="5" class="text-center">No catacomb records available</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <!-- Add Catacomb Modal -->
    <div class="modal fade" id="addCatacombModal" tabindex="-1" aria-labelledby="addCatacombModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addCatacombModalLabel">Add Catacomb</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="catacombForm">
                        <div class="mb-3">
                            <label for="catacombID" class="form-label">Catacomb ID</label>
                            <input class="form-control" type="text" id="catacombID" name="CatacombID" value="@ViewBag.GeneratedCatacombID" readonly />
                        </div>
                        <div class="mb-3">
                            <label for="catacombName" class="form-label">Catacomb Name</label>
                            <input class="form-control" type="text" id="catacombName" name="catacombName" required />
                        </div>
                        <div class="mb-3">
                            <label for="location" class="form-label">Location of Catacomb</label>
                            <input class="form-control" type="text" id="location" name="location" required />
                        </div>
                        <div class="mb-3">
                            <label for="dateCreated" class="form-label">Date Created</label>
                            <input class="form-control" type="date" id="dateCreated" name="dateCreated" required />
                        </div>
                        <div class="mb-3">
                            <div id="map" style="height: 300px;"></div> <!-- Leaflet map div -->
                        </div>
                        <div class="text-right">
                            <button id="addBtn" class="btn btn-success" type="button" onclick="addCatacomb()">Add</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>


    <!-- View Catacomb Modal -->
    <div class="modal fade" id="viewCatacombModal" tabindex="-1" aria-labelledby="viewCatacombModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="viewCatacombModalLabel">View Catacomb Information</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="viewCatacombID" class="form-label">Catacomb ID</label>
                        <input class="form-control" type="text" id="viewCatacombID" readonly />
                    </div>
                    <div class="mb-3">
                        <label for="viewCatacombName" class="form-label">Catacomb Name</label>
                        <input class="form-control" type="text" id="viewCatacombName" readonly />
                    </div>
                    <div class="mb-3">
                        <label for="viewLocation" class="form-label">Location</label>
                        <input class="form-control" type="text" id="viewLocation" readonly />
                    </div>
                    <div class="mb-3">
                        <label for="viewAvailabilityStatus" class="form-label">Availability Status</label>
                        <input class="form-control" type="text" id="viewAvailabilityStatus" readonly />
                    </div>
                </div>
            </div>
        </div>
    </div>


    <!-- Update Catacomb Modal -->
    <div class="modal fade" id="updateCatacombModal" tabindex="-1" aria-labelledby="updateCatacombModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="updateCatacombModalLabel">Update Catacomb</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="updateCatacombForm">
                        <input type="hidden" id="updateCatacombId" />
                        <div class="mb-3">
                            <label for="updateCatacombID" class="form-label">Catacomb ID</label>
                            <input class="form-control" type="text" id="updateCatacombID" readonly />
                        </div>
                        <div class="mb-3">
                            <label for="updateCatacombName" class="form-label">Catacomb Name</label>
                            <input class="form-control" type="text" id="updateCatacombName" required />
                        </div>
                        <div class="mb-3">
                            <label for="updateLocation" class="form-label">Location</label>
                            <input class="form-control" type="text" id="updateLocation" required />
                        </div>
                        <div class="mb-3">
                            <label for="updateDateCreated" class="form-label">Date Created</label>
                            <input class="form-control" type="date" id="updateDateCreated" required />
                        </div>
                        <div class="text-right">
                            <button class="btn btn-success" type="button" onclick="updateCatacomb()">Save Changes</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.datatables.net/1.11.3/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>

    <script>
        let map, marker;

        $(document).ready(function () {
            $('#catacombTable').DataTable(); // Initialize the DataTable

            // Initialize Leaflet map when the modal is shown
            $('#addCatacombModal').on('shown.bs.modal', function () {
                if (!map) {
                    map = L.map('map', {
                        center: [10.302297, 123.956832], // Initial center point
                        zoom: 17,                        // Closer zoom level
                        minZoom: 15,                     // Prevent zooming out too far
                        maxZoom: 20                      // Allow closer zooming
                    });

                    // Add OpenStreetMap tile layer
                    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                    }).addTo(map);

                    // Define max bounds for the map
                    const southWest = L.latLng(10.311161, 123.953602); // Southwest boundary
                    const northEast = L.latLng(10.293434, 123.960062); // Northeast boundary
                    const bounds = L.latLngBounds(southWest, northEast);

                    // Apply max bounds to the map
                    map.setMaxBounds(bounds);
                    map.on('drag', function () {
                        map.panInsideBounds(bounds, { animate: true });
                    });

                    // Add marker on click with latitude and longitude
                    map.on('click', function (e) {
                        const { lat, lng } = e.latlng;
                        const location = `${lat.toFixed(6)}, ${lng.toFixed(6)}`;

                        if (marker) {
                            marker.setLatLng(e.latlng);
                        } else {
                            marker = L.marker(e.latlng).addTo(map);
                        }

                        document.getElementById('location').value = location;
                    });
                }
            });


            $('#addCatacombModal').on('hidden.bs.modal', function () {
                if (marker) {
                    map.removeLayer(marker);
                    marker = null;
                }
            });
        });

        // Add Catacomb Functionality
        function addCatacomb() {
            const catacombData = {
                CatacombID: document.getElementById('catacombID').value,
                CatacombName: document.getElementById('catacombName').value,
                Location: document.getElementById('location').value,
                DateCreated: document.getElementById('dateCreated').value
            };

            fetch('/Catacomb/Create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(catacombData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    toastr.success('Catacomb added successfully! ID: ' + data.catacombID);
                    $('#addCatacombModal').modal('hide'); // Close modal on success
                    location.reload(); // Reload the page to reflect new data
                } else {
                    toastr.error('Error adding catacomb: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                toastr.error('Failed to add catacomb.');
            });
        }

        // View Catacomb Details
        function viewCatacomb(id) {
            fetch(`/Catacomb/Details/${id}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const catacomb = data.catacomb;
                    document.getElementById('viewCatacombID').value = catacomb.catacombID || '';
                    document.getElementById('viewCatacombName').value = catacomb.catacombName || '';
                    document.getElementById('viewLocation').value = catacomb.location || '';
                    document.getElementById('viewAvailabilityStatus').value = catacomb.availabilityStatus || '';
                    $('#viewCatacombModal').modal('show');
                } else {
                    toastr.error('Error fetching catacomb details: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                toastr.error('Failed to fetch catacomb details.');
            });
        }

        // Load Catacomb Details for Updating
        function editCatacomb(id) {
            fetch(`/Catacomb/Details/${id}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const catacomb = data.catacomb;
                    document.getElementById('updateCatacombId').value = catacomb.id;
                    document.getElementById('updateCatacombID').value = catacomb.catacombID;
                    document.getElementById('updateCatacombName').value = catacomb.catacombName;
                    document.getElementById('updateLocation').value = catacomb.location;
                    const dateCreated = catacomb.dateCreated ? catacomb.dateCreated.split('T')[0] : '';
                    document.getElementById('updateDateCreated').value = dateCreated;
                    $('#updateCatacombModal').modal('show'); // Show the update modal
                } else {
                    toastr.error('Error fetching catacomb details: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                toastr.error('Failed to fetch catacomb details.');
            });
        }

        // Save the updated catacomb
        function updateCatacomb() {
            const id = document.getElementById('updateCatacombId').value;
            const catacombData = {
                CatacombID: document.getElementById('updateCatacombID').value, // Include CatacombID
                CatacombName: document.getElementById('updateCatacombName').value,
                Location: document.getElementById('updateLocation').value,
                DateCreated: document.getElementById('updateDateCreated').value
            };

            fetch(`/Catacomb/Edit/${id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(catacombData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    toastr.success('Catacomb updated successfully!');
                    $('#updateCatacombModal').modal('hide'); // Close the modal
                    location.reload(); // Reload the page to reflect updates
                } else {
                    toastr.error('Error updating catacomb: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                toastr.error('Failed to update catacomb.');
            });
        }

        // Delete Catacomb Functionality
        function deleteCatacomb(id) {
            if (confirm('Are you sure you want to delete this catacomb?')) {
                fetch(`/Catacomb/Delete/${id}`, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        toastr.success('Catacomb deleted successfully!');
                        location.reload(); // Reload the page to reflect updates
                    } else {
                        toastr.error('Error deleting catacomb: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    toastr.error('Failed to delete catacomb.');
                });
            }
        }
    </script>

</body>
</html>
