@{
    Layout = null;  // Not using the _Layout.cshtml file for this specific page
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>

    <!-- Include the CSS Links Partial -->
    @Html.Partial("_CSSLinks")
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css" />

    <style>
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
        }

        #leafletMap {
            width: 100%;
            height: 100vh;
        }
    </style>
</head>
<body class="sb-nav-fixed">
    <!-- Render the Header Partial -->
    @Html.Partial("_Header")

    <div id="layoutSidenav">
        <!-- Render the Sidebar Partial -->
        @Html.Partial("_Sidebar")

        <div id="layoutSidenav_content">
            <main>
                <div id="leafletMap"></div>
            </main>
        </div>
    </div>

    <!-- Modal for Catacomb Details -->
    <div class="modal fade" id="catacombModal" tabindex="-1" aria-labelledby="catacombModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <!-- Updated modal size -->
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="catacombModalLabel">Deceased Information/Located</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div>
                        <label>Name:</label>
                        <input type="text" id="modalName" class="form-control" readonly>
                        <label>Catacomb ID:</label>
                        <input type="text" id="modalCatacombId" class="form-control" readonly>
                        <label>Catacomb number:</label>
                        <input type="text" id="modalCatacombNumber" class="form-control" readonly>
                        <label>Block number:</label>
                        <input type="text" id="modalBlockNumber" class="form-control" readonly>
                        <label>Street number:</label>
                        <input type="text" id="modalStreetNumber" class="form-control" readonly>
                        <label>Location Catacomb:</label>
                        <input type="text" id="modalLocationCatacomb" class="form-control" readonly>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    @Html.Partial("_ScriptLinks")
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const map = L.map('leafletMap', {
                center: [10.302297, 123.956832],
                zoom: 17,
                minZoom: 15,
                maxZoom: 20
            });

            // Add OpenStreetMap tile layer
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(map);

            // Function to draw catacombs based on coordinates
            function drawCatacombs(map, locations) {
                locations.forEach(catacomb => {
                    if (catacomb.latitude && catacomb.longitude) {
                        const lat = catacomb.latitude;
                        const lng = catacomb.longitude;

                        // Define the "tombstone" shape
                        const tombCoords = [
                            [lat - 0.00006, lng - 0.00008], // Bottom-left
                            [lat - 0.00006, lng + 0.00008], // Bottom-right
                            [lat, lng], // Top-center
                            [lat - 0.00006, lng - 0.00008] // Back to Bottom-left
                        ];

                        // Color coding based on availability status
                        const fillColor = catacomb.availabilityStatus === 'Available' ? 'green' : 'red';

                        // Draw the tombstone
                        const tombstone = L.polygon(tombCoords, {
                            color: 'black',
                            fillColor: fillColor,
                            fillOpacity: 0.7,
                            weight: 1
                        }).addTo(map);

                        // Add a tooltip for the catacomb
                        tombstone.bindTooltip(
                            `<strong>${catacomb.catacombName || 'Unknown'}</strong><br>Status: ${catacomb.availabilityStatus || 'Unknown'}`,
                            { permanent: false, direction: 'top' }
                        );

                        // Add a click event to show detailed information
                        tombstone.on('click', function () {
                            showModal(catacomb);
                        });
                    }
                });
            }

            // Function to add decorative elements like pathways and trees
            function addDecorations(map) {
                // Example pathways
                const pathways = [
                    [[10.303, 123.954], [10.303, 123.957]],
                    [[10.302, 123.954], [10.302, 123.957]],
                    [[10.304, 123.955], [10.301, 123.955]]
                ];
                pathways.forEach(path => {
                    L.polyline(path, { color: 'gray', weight: 2, dashArray: '5, 10' }).addTo(map);
                });

                // Example trees
                const trees = [
                    { lat: 10.3035, lng: 123.955, name: 'Tree 1' },
                    { lat: 10.3025, lng: 123.956, name: 'Tree 2' },
                    { lat: 10.303, lng: 123.957, name: 'Tree 3' }
                ];
                trees.forEach(tree => {
                    L.circle([tree.lat, tree.lng], {
                        color: 'green',
                        fillColor: 'green',
                        fillOpacity: 0.5,
                        radius: 5
                    }).bindTooltip(tree.name).addTo(map);
                });
            }

            // Fetch catacomb locations and draw on the map
            fetch('/Catacomb/GetLocations')
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.locations) {
                        console.log('Fetched locations:', data.locations);
                        drawCatacombs(map, data.locations);
                        addDecorations(map); // Add pathways, trees, etc.
                    } else {
                        console.error('Error fetching locations:', data.message);
                    }
                })
                .catch(error => console.error('Error:', error));

            // Show modal with catacomb details
            function showModal(catacomb) {
                document.getElementById('modalName').value = catacomb.catacombName || 'N/A';
                document.getElementById('modalCatacombId').value = catacomb.catacombID || 'N/A';
                document.getElementById('modalCatacombNumber').value = catacomb.catacombNumber || 'N/A';
                document.getElementById('modalBlockNumber').value = catacomb.blockNumber || 'N/A';
                document.getElementById('modalStreetNumber').value = catacomb.streetNumber || 'N/A';
                document.getElementById('modalLocationCatacomb').value = `${catacomb.latitude}, ${catacomb.longitude}` || 'N/A';

                const modal = new bootstrap.Modal(document.getElementById('catacombModal'));
                modal.show();
            }
        });

    </script>
</body>
</html>
