@{
    Layout = null;  // Not using the _Layout.cshtml file for this specific page
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>

    <!-- Include the CSS Links Partial -->
    @Html.Partial("_CSSLinks")
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css" />

    <style>
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
        }

        #leafletMap {
            width: 100%;
            height: 100vh;
        }
    </style>
</head>
<body class="sb-nav-fixed">
    <!-- Render the Header Partial -->
    @Html.Partial("_Header")

    <div id="layoutSidenav">
        <!-- Render the Sidebar Partial -->
        @Html.Partial("_Sidebar")

        <div id="layoutSidenav_content">
            <main>
                <div id="leafletMap"></div>
            </main>
        </div>
    </div>

    <!-- Modal for Catacomb Details -->
    <div class="modal fade" id="catacombModal" tabindex="-1" aria-labelledby="catacombModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <!-- Updated modal size -->
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="catacombModalLabel">Deceased Information/Located</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div>
                        <label>Name:</label>
                        <input type="text" id="modalName" class="form-control" readonly>
                        <label>ID:</label>
                        <input type="text" id="modalId" class="form-control" readonly>
                        <label>Catacomb ID:</label>
                        <input type="text" id="modalCatacombId" class="form-control" readonly>
                        <label>Catacomb number:</label>
                        <input type="text" id="modalCatacombNumber" class="form-control" readonly>
                        <label>Block number:</label>
                        <input type="text" id="modalBlockNumber" class="form-control" readonly>
                        <label>Street number:</label>
                        <input type="text" id="modalStreetNumber" class="form-control" readonly>
                        <label>Location Catacomb:</label>
                        <input type="text" id="modalLocationCatacomb" class="form-control" readonly>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    @Html.Partial("_ScriptLinks")
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            console.log('DOM fully loaded and parsed');

            // Define custom green and red marker icons
            const greenIcon = L.icon({
                iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png',
                shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.1/images/marker-shadow.png',
                iconSize: [25, 41],
                iconAnchor: [12, 41],
                popupAnchor: [1, -34],
                shadowSize: [41, 41]
            });

            const redIcon = L.icon({
                iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',
                shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.1/images/marker-shadow.png',
                iconSize: [25, 41],
                iconAnchor: [12, 41],
                popupAnchor: [1, -34],
                shadowSize: [41, 41]
            });

            // Initialize the Leaflet map
            const map = L.map('leafletMap', {
                center: [10.302297, 123.956832],
                zoom: 17,
                minZoom: 15,
                maxZoom: 20
            });

            // Define max bounds for the map
            const southWest = L.latLng(10.311161, 123.953602);
            const northEast = L.latLng(10.293434, 123.960062);
            const bounds = L.latLngBounds(southWest, northEast);

            map.setMaxBounds(bounds);
            map.on('drag', function () {
                map.panInsideBounds(bounds, { animate: true });
            });

            // Add OpenStreetMap tile layer
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(map);

            // Add a search bar to the map
            const geocoder = L.Control.geocoder({ defaultMarkGeocode: false }).addTo(map);

            geocoder.on('markgeocode', function (e) {
                const bbox = e.geocode.bbox;
                const poly = L.polygon([
                    bbox.getSouthEast(),
                    bbox.getNorthEast(),
                    bbox.getNorthWest(),
                    bbox.getSouthWest()
                ]).addTo(map);
                map.fitBounds(poly.getBounds());
            });

            // Fetch catacomb locations from the server
            fetch('/Catacomb/GetLocations')
                .then(response => {
                    if (!response.ok) throw new Error('Network response was not ok');
                    return response.json();
                })
                .then(data => {
                    if (data.success && data.locations) {
                        data.locations.forEach(catacomb => {
                            const icon = (catacomb.AvailabilityStatus === 'Available') ? greenIcon : redIcon;

                            if (catacomb.latitude && catacomb.longitude) {
                                // Define dimensions for the tomb shape
                                const baseWidth = 0.0001; // Adjust width
                                const baseHeight = 0.00007; // Adjust height
                                const roundedTopHeight = 0.00003; // Adjust rounded top height

                                const lat = catacomb.latitude;
                                const lng = catacomb.longitude;

                                // Define the tomb-like shape as a polygon
                                const tombCoords = [
                                    [lat - baseHeight, lng - baseWidth], // Bottom-left of the base
                                    [lat - baseHeight, lng + baseWidth], // Bottom-right of the base
                                    [lat - baseHeight + roundedTopHeight, lng + baseWidth], // Start of rounded top
                                    [lat, lng], // Top-center point
                                    [lat - baseHeight + roundedTopHeight, lng - baseWidth], // End of rounded top
                                ];

                                // Set color based on availability status
                                const color = (catacomb.AvailabilityStatus === 'Available') ? 'green' : 'red';

                                // Create a polygon representing the tomb and add it to the map
                                const tombShape = L.polygon(tombCoords, { color: color, weight: 2 }).addTo(map);

                                // Add click event to show modal with catacomb details
                                tombShape.on('click', function () {
                                    showModal(catacomb);
                                });
                            }

                        });
                    } else {
                        console.error('Error fetching locations:', data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        });

        function showModal(catacomb) {
            document.getElementById('modalName').value = catacomb.CatacombName;
            document.getElementById('modalId').value = catacomb.ID;
            document.getElementById('modalCatacombId').value = catacomb.CatacombID;
            document.getElementById('modalCatacombNumber').value = catacomb.CatacombName;
            document.getElementById('modalBlockNumber').value = catacomb.CatacombName;
            document.getElementById('modalStreetNumber').value = catacomb.CatacombName;
            document.getElementById('modalLocationCatacomb').value = catacomb.Location;

            const modal = new bootstrap.Modal(document.getElementById('catacombModal'));
            modal.show();
        }
    </script>
</body>
</html>
