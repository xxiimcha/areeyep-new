@{
    Layout = null;  // Not using the _Layout.cshtml file for this specific page
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>

    @Html.Partial("_CSSLinks")
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css" />

    <style>
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
        }

        #leafletMap {
            width: 100%;
            height: 100vh;
        }

        .offcanvas {
            width: 300px; /* Customize the width of the sidebar */
        }
        #searchContainer {
            transition: opacity 0.3s ease, transform 0.3s ease;
        }

        #searchContainer {
            position: absolute;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 1001;
            width: 450px;
            background-color: rgba(255, 255, 255, 0.9);
            padding: 12px 20px;
            border-radius: 15px;
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);
            display: flex;
            align-items: center;
            animation: fadeIn 1s ease-out;
        }

        #catacombSearch {
            flex: 1;
            border: none;
            box-shadow: none;
            border-radius: 10px;
            padding: 10px 15px;
            font-size: 14px;
        }

        #clearSearchButton {
            margin-left: 12px;
            border-radius: 10px;
            padding: 10px 15px;
            font-size: 14px;
        }

        #clearSearchButton:hover {
            background-color: #6c757d; /* Slightly darker gray */
            color: #fff; /* White text */
            transform: scale(1.05); /* Slight zoom effect */
            transition: all 0.3s ease; /* Smooth transition */
        }

        #suggestionsList {
            position: absolute;
            top: 60px;
            left: 50%;
            transform: translateX(-50%);
            width: 450px;
            max-height: 200px; /* Limit the height for scrollability */
            overflow-y: auto;
            background-color: #fff;
            border: 1px solid #ddd;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            z-index: 1002;
            padding: 0;
            margin: 0;
            list-style: none;
        }

        #suggestionsList li {
            padding: 12px 15px;
            font-size: 14px;
            color: #333;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        #suggestionsList li:hover {
            background-color: #f0f0f0;
        }

        #suggestionsList li:active {
            background-color: #e0e0e0;
        }

        @@keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateX(-50%) translateY(-20px);
            }
            to {
                opacity: 1;
                transform: translateX(-50%) translateY(0);
            }
        }

        #clearSearchButton:hover {
            background-color: #6c757d; /* Slightly darker gray */
            color: #fff; /* White text */
            transform: scale(1.05); /* Slight zoom effect */
            transition: all 0.3s ease; /* Smooth transition */
        }
    </style>

</head>
<body class="sb-nav-fixed">
    @Html.Partial("_Header")

    <div id="layoutSidenav">
        @Html.Partial("_Sidebar")

        <div id="layoutSidenav_content">
            <main>
                <div id="searchContainer">
                    <input type="text"
                           id="catacombSearch"
                           class="form-control"
                           placeholder="Search Catacomb by Name or ID"
                           autocomplete="off" />
                    <button id="clearSearchButton" class="btn btn-secondary">Clear</button>
                    <ul id="suggestionsList"></ul> <!-- Suggestions container -->
                </div>

                <div id="leafletMap"></div>
            </main>
        </div>
    </div>
    <!-- Sidebar for Catacomb Details -->
    <div class="offcanvas offcanvas-end" tabindex="-1" id="catacombSidebar" aria-labelledby="catacombSidebarLabel">
        <div class="offcanvas-header">
            <h5 class="offcanvas-title" id="catacombSidebarLabel">Catacomb Details</h5>
            <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body">
            <table class="table table-bordered">
                <tbody>
                    <tr>
                        <th>Name:</th>
                        <td id="sidebarName">N/A</td>
                    </tr>
                    <tr>
                        <th>Catacomb ID:</th>
                        <td id="sidebarCatacombId">N/A</td>
                    </tr>
                    <tr>
                        <th>Catacomb Number:</th>
                        <td id="sidebarCatacombNumber">N/A</td>
                    </tr>
                    <tr>
                        <th>Block Number:</th>
                        <td id="sidebarBlockNumber">N/A</td>
                    </tr>
                    <tr>
                        <th>Street Number:</th>
                        <td id="sidebarStreetNumber">N/A</td>
                    </tr>
                    <tr>
                        <th>Location:</th>
                        <td id="sidebarLocationCatacomb">N/A</td>
                    </tr>
                </tbody>
            </table>
            <button id="navigateButton" class="btn btn-primary mt-3">Navigate to Location</button>
        </div>
    </div>


    @Html.Partial("_ScriptLinks")
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const searchInput = document.getElementById('catacombSearch');
            const suggestionsList = document.getElementById('suggestionsList');
            let markers = []; // Store catacomb markers
            let deceasedData = []; // Store deceased data for searching

            // Fetch deceased data on page load
            fetch('/Deceased/GetAll') // Replace with your endpoint
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.deceased) {
                        deceasedData = data.deceased;
                        console.log("Deceased data loaded:", deceasedData);
                    } else {
                        console.warn("No deceased data found.");
                    }
                })
                .catch(error => console.error("Error fetching deceased data:", error));

            // Handle search input
            searchInput.addEventListener('input', function () {
                const query = searchInput.value.toLowerCase();
                console.log(`Search query: ${query}`);

                suggestionsList.innerHTML = ''; // Clear previous suggestions
                suggestionsList.style.display = 'none'; // Hide by default

                if (query.trim() === '') {
                    markers.forEach(({ marker }) => marker.setOpacity(1)); // Reset marker opacity
                    return;
                }

                const catacombSuggestions = markers.filter(({ catacomb }) =>
                    catacomb.catacombName.toLowerCase().includes(query) ||
                    catacomb.catacombID.toLowerCase().includes(query)
                );

                const deceasedSuggestions = deceasedData.filter(deceased =>
                    deceased.firstName.toLowerCase().includes(query) ||
                    deceased.lastName.toLowerCase().includes(query)
                );

                if (catacombSuggestions.length > 0 || deceasedSuggestions.length > 0) {
                    suggestionsList.style.display = 'block'; // Show suggestions list

                    // Add catacomb suggestions
                    catacombSuggestions.forEach(({ catacomb }) => {
                        const listItem = document.createElement('li');
                        listItem.textContent = `${catacomb.catacombName} (${catacomb.catacombID})`;
                        listItem.addEventListener('click', function () {
                            console.log(`Clicked catacomb suggestion: ${catacomb.catacombName}`);

                            // Focus map on the marker
                            const { latitude, longitude } = catacomb;
                            map.setView([latitude, longitude], 18);

                            // Open marker popup
                            const marker = markers.find(m => m.catacomb.catacombID === catacomb.catacombID).marker;
                            marker.openPopup();

                            // Display sidebar information
                            showSidebar(catacomb);

                            // Set input value and hide suggestions
                            searchInput.value = catacomb.catacombName;
                            suggestionsList.style.display = 'none';
                        });
                        suggestionsList.appendChild(listItem);
                    });

                    // Add deceased suggestions
                    deceasedSuggestions.forEach(deceased => {
                        const listItem = document.createElement('li');
                        listItem.textContent = `${deceased.firstName} ${deceased.lastName} (Deceased)`;
                        listItem.addEventListener('click', function () {
                            console.log(`Clicked deceased suggestion: ${deceased.firstName} ${deceased.lastName}`);

                            // Display deceased details in a modal or sidebar
                            showDeceasedDetails(deceased);

                            // Set input value and hide suggestions
                            searchInput.value = `${deceased.firstName} ${deceased.lastName}`;
                            suggestionsList.style.display = 'none';
                        });
                        suggestionsList.appendChild(listItem);
                    });
                }
            });

            // Hide suggestions when clicking outside
            document.addEventListener('click', function (e) {
                if (!searchInput.contains(e.target) && !suggestionsList.contains(e.target)) {
                    suggestionsList.style.display = 'none';
                }
            });

            console.log("Map initialization started.");

            const map = L.map('leafletMap', {
                center: [10.302297, 123.956832],
                zoom: 17,
                minZoom: 15,
                maxZoom: 20
            });

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(map);

            let routePolyline; // Store the route
            const simulatedCurrentLocation = [10.3082103, 123.9498301]; // Fixed current location coordinates

            // Add marker for the fixed current location
            const currentLocationMarker = L.marker(simulatedCurrentLocation, {
                icon: L.icon({
                    iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-blue.png',
                    iconSize: [25, 41],
                    iconAnchor: [12, 41],
                    popupAnchor: [1, -34],
                    shadowSize: [41, 41]
                })
            }).addTo(map).bindPopup('Simulated Current Location').openPopup();

            console.log("Simulated current location marker added at:", simulatedCurrentLocation);

            // Function to fetch a route
            function getRoute(start, end) {
                console.log(`Fetching route from ${start} to ${end}.`);
                const apiKey = '5b3ce3597851110001cf624825ebcfd826c5466e8fc6307d700988ec';
                const url = `https://api.openrouteservice.org/v2/directions/driving-car?api_key=${apiKey}&start=${start[1]},${start[0]}&end=${end[1]},${end[0]}`;

                console.log(`Route API URL: ${url}`);
                fetch(url)
                    .then(response => response.json())
                    .then(data => {
                        const coordinates = data.features[0].geometry.coordinates.map(coord => [coord[1], coord[0]]);
                        console.log("Coordinates for the route:", coordinates);

                        if (routePolyline) {
                            console.log("Removing previous route.");
                            map.removeLayer(routePolyline); // Remove previous route
                        }

                        routePolyline = L.polyline(coordinates, { color: 'blue' }).addTo(map);
                        console.log("Route added to the map.");
                        map.fitBounds(routePolyline.getBounds());
                        console.log("Map adjusted to fit the route bounds.");
                    })
                    .catch(error => console.error('Error fetching route:', error));
            }

            // Function to show the sidebar with catacomb details
            function showSidebar(catacomb) {
                console.log("Displaying sidebar for catacomb:", catacomb);

                // Update the table cells with catacomb details
                document.getElementById('sidebarName').textContent = catacomb.catacombName || 'N/A';
                document.getElementById('sidebarCatacombId').textContent = catacomb.catacombID || 'N/A';
                document.getElementById('sidebarCatacombNumber').textContent = catacomb.catacombNumber || 'N/A';
                document.getElementById('sidebarBlockNumber').textContent = catacomb.blockNumber || 'N/A';
                document.getElementById('sidebarStreetNumber').textContent = catacomb.streetNumber || 'N/A';
                document.getElementById('sidebarLocationCatacomb').textContent = `${catacomb.latitude}, ${catacomb.longitude}` || 'N/A';

                // Check availability status
                if (catacomb.availabilityStatus === 'Occupied') {
                    console.log("Fetching deceased details for the occupied catacomb:", catacomb.catacombID);

                    // Fetch deceased details using the `DeceasedInformation` ID
                    fetch(`/Deceased/GetDetails/${catacomb.deceasedInformation}`)
                        .then(response => response.json())
                        .then(deceasedData => {
                            if (deceasedData.success) {
                                console.log("Deceased details received:", deceasedData);

                                // Add deceased details to the sidebar
                                const deceasedDetails = `
                                <tr>
                                    <th>First Name:</th>
                                    <td>${deceasedData.firstName || 'N/A'}</td>
                                </tr>
                                <tr>
                                    <th>Last Name:</th>
                                    <td>${deceasedData.lastName || 'N/A'}</td>
                                </tr>
                                <tr>
                                    <th>Date of Birth:</th>
                                    <td>${deceasedData.dateOfBirth || 'N/A'}</td>
                                </tr>
                                <tr>
                                    <th>Date of Death:</th>
                                    <td>${deceasedData.dateOfDeath || 'N/A'}</td>
                                </tr>
                                <tr>
                                    <th>Address:</th>
                                    <td>${deceasedData.address || 'N/A'}</td>
                                </tr>
                                <tr>
                                    <th>Cause of Death:</th>
                                    <td>${deceasedData.causeOfDeath || 'N/A'}</td>
                                </tr>
                            `;

                                const tableBody = document.querySelector('.offcanvas-body table tbody');
                                tableBody.innerHTML += deceasedDetails;
                            } else {
                                console.warn("No deceased details found.");
                            }
                        })
                        .catch(error => {
                            console.error("Error fetching deceased details:", error);
                        });
                } else {
                    console.log("Catacomb is available, no deceased details to display.");
                }

                document.getElementById('navigateButton').onclick = function () {
                    console.log("Navigate button clicked.");
                    const start = simulatedCurrentLocation; // Use fixed current location
                    const end = [catacomb.latitude, catacomb.longitude];
                    console.log("Simulated current location:", start);
                    console.log("Destination location:", end);
                    getRoute(start, end);
                };

                const sidebar = new bootstrap.Offcanvas(document.getElementById('catacombSidebar'));
                console.log("Opening sidebar.");
                sidebar.show();

                // Center map on the selected catacomb
                console.log("Centering map on catacomb location:", [catacomb.latitude, catacomb.longitude]);
                map.setView([catacomb.latitude, catacomb.longitude], 17);
            }

            // Fetch and draw catacombs with different colors for availability
            console.log("Fetching catacomb locations.");
            fetch('/Catacomb/GetLocations')
                .then(response => response.json())
                .then(data => {
                    console.log("Catacomb data received:", data);

                    if (data.success && data.locations) {
                        console.log("Drawing catacombs on the map.");
                        const bounds = [];

                        data.locations.forEach(catacomb => {
                            if (catacomb.latitude && catacomb.longitude) {
                                // Determine marker color based on availability status
                                const markerColor = catacomb.availabilityStatus === 'Available'
                                    ? 'green'
                                    : 'red';

                                const marker = L.marker([catacomb.latitude, catacomb.longitude], {
                                    icon: L.icon({
                                        iconUrl: `https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-${markerColor}.png`,
                                        iconSize: [25, 41],
                                        iconAnchor: [12, 41],
                                        popupAnchor: [1, -34],
                                        shadowSize: [41, 41]
                                    })
                                }).addTo(map);

                                console.log(`Marker added for catacomb: ${catacomb.catacombName} at [${catacomb.latitude}, ${catacomb.longitude}] with status: ${catacomb.availabilityStatus}.`);

                                marker.on('click', function () {
                                    console.log(`Marker clicked for catacomb: ${catacomb.catacombName}.`);
                                    showSidebar(catacomb);
                                });

                                markers.push({ marker, catacomb });
                                bounds.push([catacomb.latitude, catacomb.longitude]);
                            }
                        });

                        if (bounds.length > 0) {
                            console.log("Adjusting map to fit all catacombs.");
                            map.fitBounds(bounds);
                        }
                    } else {
                        console.warn("No catacomb locations found.");
                    }
                })
                .catch(error => console.error('Error fetching locations:', error));
        });

    </script>
</body>
</html>
