@model Dictionary<string, IEnumerable<AreEyeP.Models.Notification>>

@{
    Layout = null; // Not using a layout for this specific page
    ViewData["Title"] = "Notifications";

    // Determine if there are unread notifications for each category
    var hasUnreadApplication = Model.ContainsKey("Application") && Model["Application"].Any(n => !n.IsRead);
    var hasUnreadServiceRequests = Model.ContainsKey("ServiceRequests") && Model["ServiceRequests"].Any(n => !n.IsRead);
    var hasUnreadPayments = Model.ContainsKey("Payments") && Model["Payments"].Any(n => !n.IsRead);
    var hasUnreadRenewals = Model.ContainsKey("Renewals") && Model["Renewals"].Any(n => !n.IsRead);
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    @Html.Partial("_CSSLinks")
    <style>
        .notification-card {
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 15px;
            margin-bottom: 15px;
            background-color: #f9f9f9;
        }

            .notification-card.unread {
                background-color: #eaf2ff; /* Highlight unread notifications */
                font-weight: bold;
            }

            .notification-card h5 {
                margin: 0;
                font-weight: bold;
            }

            .notification-card p {
                margin: 5px 0 0;
            }

            .notification-card .date {
                font-size: 0.9em;
                color: #888;
            }

        .btn-mark-all,
        .btn-clear-all {
            margin: 10px 0;
        }

        .nav-link .dot {
            height: 8px;
            width: 8px;
            background-color: red;
            border-radius: 50%;
            display: inline-block;
            margin-left: 5px;
        }
    </style>
</head>
<body class="sb-nav-fixed">
    @Html.Partial("_Header")

    <div id="layoutSidenav">
        @Html.Partial("_Sidebar")
        <div id="layoutSidenav_content">
            <main>
                <div class="container-fluid px-4">
                    <h2 class="text-center mt-4 mb-4">Notifications</h2>

                    <div class="d-flex justify-content-end mb-3">
                        <button class="btn btn-primary btn-mark-all me-2" onclick="markAllAsRead()">Mark All as Read</button>
                        <button class="btn btn-danger btn-clear-all" onclick="clearNotifications()">Clear All Notifications</button>
                    </div>

                    <ul class="nav nav-tabs" id="notificationTabs" role="tablist">
                        <li class="nav-item">
                            <a class="nav-link active" id="application-tab" data-bs-toggle="tab" href="#application" role="tab" aria-controls="application" aria-selected="true">
                                Application
                                @if (hasUnreadApplication)
                                {
                                    <span class="dot"></span>
                                }
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" id="service-requests-tab" data-bs-toggle="tab" href="#service-requests" role="tab" aria-controls="service-requests" aria-selected="false">
                                Service Requests
                                @if (hasUnreadServiceRequests)
                                {
                                    <span class="dot"></span>
                                }
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" id="payments-tab" data-bs-toggle="tab" href="#payments" role="tab" aria-controls="payments" aria-selected="false">
                                Payments
                                @if (hasUnreadPayments)
                                {
                                    <span class="dot"></span>
                                }
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" id="renewals-tab" data-bs-toggle="tab" href="#renewals" role="tab" aria-controls="renewals" aria-selected="false">
                                Renewals
                                @if (hasUnreadRenewals)
                                {
                                    <span class="dot"></span>
                                }
                            </a>
                        </li>
                    </ul>

                    <div class="tab-content" id="notificationTabContent">
                        @foreach (var category in Model)
                        {
                            // Ensure consistent key and ID formatting
                            var tabId = category.Key.Replace(" ", "").ToLower();

                            // Set active class dynamically
                            var isActive = category.Key == "Application" ? "show active" : "";

                            <div class="tab-pane fade @isActive"
                                 id="@tabId" role="tabpanel"
                                 aria-labelledby="@tabId-tab">

                                @if (category.Value != null && category.Value.Any())
                                {
                                    foreach (var notification in category.Value)
                                    {
                                        <div class="notification-card mt-3 @(notification.IsRead ? "" : "unread")"
                                             onclick="markAsRead(@notification.Id)">
                                            <h5>@notification.Type</h5>
                                            <p>@notification.Message</p>
                                            <p class="date">Posted on: @notification.CreatedAt.ToString("MMMM dd, yyyy")</p>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <p class="text-center mt-3">No @category.Key notifications found.</p>
                                }
                            </div>
                        }
                    </div>
                </div>
            </main>
        </div>
    </div>

    @Html.Partial("_ScriptLinks")
    <script>
        function markAsRead(notificationId) {
            fetch(`/Notifications/MarkAsRead?id=${notificationId}`, { method: 'POST' })
                .then(response => response.json())
                .then(data => { if (data.success) location.reload(); })
                .catch(error => console.error("Error:", error));
        }

        function markAllAsRead() {
            fetch(`/Notifications/MarkAllAsRead`, { method: 'POST' })
                .then(response => response.json())
                .then(data => { if (data.success) location.reload(); })
                .catch(error => console.error("Error:", error));
        }

        function clearNotifications() {
            Swal.fire({
                title: "Are you sure?",
                text: "This will remove all notifications permanently!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#d33",
                cancelButtonColor: "#3085d6",
                confirmButtonText: "Yes, clear all!"
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/Notifications/ClearAll`, { method: 'POST' })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                Swal.fire("Cleared!", "All notifications have been removed.", "success")
                                    .then(() => location.reload());
                            } else {
                                Swal.fire("Error!", "Failed to clear notifications.", "error");
                            }
                        })
                        .catch(error => {
                            console.error("Error:", error);
                            Swal.fire("Error!", "An unexpected error occurred.", "error");
                        });
                }
            });
        }

        function clearNotifications() {
            Swal.fire({
                title: "Are you sure?",
                text: "This will remove all notifications permanently!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#d33",
                cancelButtonColor: "#3085d6",
                confirmButtonText: "Yes, clear all!"
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/Notifications/ClearAll`, { method: 'POST' })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                Swal.fire("Cleared!", "All notifications have been removed.", "success")
                                    .then(() => location.reload());
                            } else {
                                Swal.fire("Error!", "Failed to clear notifications.", "error");
                            }
                        })
                        .catch(error => {
                            console.error("Error:", error);
                            Swal.fire("Error!", "An unexpected error occurred.", "error");
                        });
                }
            });
        }

    </script>
</body>
</html>
